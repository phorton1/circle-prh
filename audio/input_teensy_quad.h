/* Circle Audio Library for Teensy 3.X
 * Copyright (c) 2014, Paul Stoffregen, paul@pjrc.com
 * Copyright (c) 2019, Patrick Horton
 *
 * Development of this audio library was funded by PJRC.COM, LLC by sales of
 * Teensy and Audio Adaptor boards.  Please support PJRC's efforts to develop
 * open source software by purchasing Teensy or other PJRC products.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice, development funding notice, and this permission
 * notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// This circle only class is kind of neat.
//
// It adds 2 channel input and output device(s) that can communicate
// with an existing, running, teensy audio application.  The teensy
// MPU has two i2s modules (as opposed to the one on the bm2835) that
// run synchronously.   Paul has created the AudioI2SQuad input and
// output devices to allow two teensy sound shields to be stacked for
// quad io.
//
// This class allows you to easily use any rPi, including the zero and 3B+,
// as a DSP co-processor to a teensy audio application.  It *may* even allow
// you to retrofit such an additional processor into your existing teensy
// audio application with a minimal set of changes.
//
// From the rpi's perspective, it is simply an i2s IO device, that
// happens to use a 16 bit channel width instead of 32 bits, aa that
// is the channel frame packing that I see with the default build of
// the teensy quad libraries in the Arduino IDE.  At this time there
// is no corresponding "control" object, though one could be implemented
// in the teensy INO sketch, if you really wanted.
//
//
//  +-------------------+	  teensy        +--------------------+
//  |   Teensy Audio    |   quad channels   |       rPi          |
//  |    application    |      2 & 3        | acting as an audio |
//  |    using quad     | <===============> |    co-processor    |
//  |    audio device   |                   |                    |
//  +-------------------+					+--------------------+
//       ^        |
//       |        |      teensy quad 
//       |        v     channels 0 & 1
//      IN       OUT
//
//--------------------------------------------------------------
// Pin Numbers
//--------------------------------------------------------------
// Notes revised 2025-01-23
//
// Even though the Looper is NOT using this quad device, this is,
// perhaps, from a historical perspective, the best place for these
// notes, because I own this source code.
//
// The Looper, in the TE3 incarnation, uses a straight i2s input/output
// pair on the rPi, whereas it used the input_tdm devices on the TE1/2
// incarnations.
//
// This teensyQuad device is called an i2sQuad device in the current
// and actual teensy Arduino libraries.
//
// It is important to note that one man's TX is another man's RX.
//
// There are PHOTOS of the teensies and audio boards, and addiitonally
// DIAGRAMS of the audio boards, as well as the fact that there are
// revB (teensy3) and revD (teensy4) audio shields.
//
// The best derinitive pin numbers for teensy I2S devices are found with
// Paul's audio online library design tool
//
// In general the rPi is a horrible source for clocks, and so in all
// incarnations of the Looper, somebody else provides the clocks.
//
//---------------------------------------------------------------------
// definitive table
//---------------------------------------------------------------------
//
// This table best summarizes the I2S pin usages between the
// teensy audio shields, the teensy MPU's, and the rPi
//
// teensy
// audio		revB			revD
// diagram		teensy			teensy	teensy					quad
// label		3.2		3.6		4.x		fxn			rPi			chan		notes
// ----------------------------------------------------------------------------------------------------
// MCLCK		11				23		MCLCK								generated by teensy
// BLCK			9				21		BCLK		18_BCLK					generated by teensy
// LRCLK		23				20		LRCLCK		19_FCLK					generated by teensy
// SGTL_DOUT	13				8		I2S_RXA					in(0,1)		audio inputs --> SGTL --> teensy
// SGTL_DIN		22				7		I2S_TXA					out(0,1)	teensy --> SGTL --> audio outputs
// 				15				32*		I2S_TXB		20_RPI_RXD	out(2,3)	teensy --> Looper
// 				30*		38		6		I2S_RXB		21_RPI_TXD	in(2,3)		Looper --> teensy
//
// * pins on bottom of teensy3.2 and 4.0
//   on my first modified teensy4.0 this is the GREY wire in the 3 pin connector


#ifndef _input_teensy_quad_h_
#define _input_teensy_quad_h_

#include "Arduino.h"
#include "AudioStream.h"

	
class AudioInputTeensyQuad : public AudioStream
	// this is a slave only device
{
public:

	AudioInputTeensyQuad(void);

    virtual const char *getName()   { return "tquadi"; }        
	virtual u16   getType()  		{ return AUDIO_DEVICE_INPUT; }
	
private:

	static bool s_update_responsibility;
	static void isr(void);

	static audio_block_t *s_block_left;
	static audio_block_t *s_block_right;
	
	virtual void update(void);
	void start(void);
	
};

#endif
